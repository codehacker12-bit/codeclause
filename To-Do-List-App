#Created a Basic To-Do-List App that allows users to ADD, Edit, Mark As Read and Remove Tasks

import tkinter as tk
from tkinter import messagebox


class ToDoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Welcome to: TO-DO LIST APP!") #title of the application window

        #Change window background color
        self.root.configure(bg="lightblue")  #set background color
        self.tasks = [] #empty list to store tasks

        #Entry widget for adding tasks
        self.task_input = tk.Entry(root, width=45)
        self.task_input.grid(row=0, column=0, padx=10, pady=10)

        #Add task button
        self.add_button = tk.Button(root, text="Add Todo", command=self.add_task)
        self.add_button.grid(row=0, column=1, padx=10, pady=10)

        #Edit task button
        self.edit_button = tk.Button(root, text="Edit Task", command=self.edit_task)
        self.edit_button.grid(row=1, column=2, padx=10, pady=10)

        #Listbox to display tasks
        self.task_listbox = tk.Listbox(root, width=50, height=15, selectmode=tk.MULTIPLE)
        self.task_listbox.grid(row=1, column=0, columnspan=2, padx=10, pady=10)

        #Mark as completed button
        self.complete_button = tk.Button(root, text="Mark as Completed", command=self.mark_completed)
        self.complete_button.grid(row=2, column=0, padx=10, pady=5)

        #Remove completed button
        self.remove_button = tk.Button(root, text="Remove Completed", command=self.remove_completed)
        self.remove_button.grid(row=2, column=1, padx=10, pady=5)

    def add_task(self): #adding tasks to the list
        task = self.task_input.get()
        if task.strip():  #check if the task is not empty
            self.tasks.append(task) #adds the task to the list of tasks
            self.update_task_list() #refreshes the task listbox
            self.task_input.delete(0, tk.END)  #clear input
        else:
            messagebox.showwarning("Input Error", "Task cannot be empty.")

    def edit_task(self):
        selected_task_index = self.task_listbox.curselection()  #get the selected task index
        if selected_task_index:  #check if a task is selected
            task_index = selected_task_index[0]  #extract index of selected task
            new_task = self.task_input.get()  #get the new task from the input field
            if new_task.strip():  #check if the new task is not empty
                self.tasks[task_index] = new_task  #update the task in the tasks list
                self.update_task_list()  #refresh the listbox
                self.task_input.delete(0, tk.END)  #clear input field
            else:
                messagebox.showwarning("Input Error", "Task cannot be empty.")
        else:
            messagebox.showwarning("Selection Error", "Please select a task to edit.")

    def mark_completed(self):
        selected_tasks = self.task_listbox.curselection()
        for i in selected_tasks:
            self.task_listbox.itemconfig(i, fg="blue") #changes the text color of the selected tasks to blue

    def remove_completed(self):
        selected_tasks = self.task_listbox.curselection()
        for i in reversed(selected_tasks): #reversef to avoid index shifting
            del self.tasks[i] #deletes the selected tasks from the tasks list
        self.update_task_list()

    def update_task_list(self):
        self.task_listbox.delete(0, tk.END) #clears all item from the listbox
        for task in self.tasks:
            self.task_listbox.insert(tk.END, task)

if __name__ == "__main__":
    root = tk. Tk() #creates the main application window
    app = ToDoApp(root)
    root.mainloop()
